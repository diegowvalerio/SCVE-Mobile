package net.ddns.scvemarchezanmetais.scvemobile.dadosws;

import android.app.Activity;
import android.os.AsyncTask;
import android.os.Build;
import android.support.annotation.RequiresApi;
import android.widget.Toast;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import net.ddns.scvemarchezanmetais.scvemobile.banco.DatabaseHelper;
import net.ddns.scvemarchezanmetais.scvemobile.dao.DAOJuridica;
import net.ddns.scvemarchezanmetais.scvemobile.entidades.Pjuridica;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

public class WsPjuridicaPOST extends AsyncTask<String,Integer,String> {
    Activity activity;


    private DatabaseHelper dh;
    private DAOJuridica daoJuridica;
    private List<Pjuridica> pjuridicas = new ArrayList<>();

    public WsPjuridicaPOST(Activity activity, List<Pjuridica> pjuridicas){
        this.activity = activity;
        this.pjuridicas = pjuridicas;
    }

    @Override
    protected void onPreExecute() {
        super.onPreExecute();
        //ProgressDialog.show(activity, "Por favor Aguarde ...","Enviando Cliente ...");
        Toast.makeText(activity, "Enviando Cnpj do Cliente", Toast.LENGTH_SHORT).show();
    }

    @RequiresApi(api = Build.VERSION_CODES.KITKAT)
    @Override
    protected void onPostExecute(String s) {
        super.onPostExecute(s);
        if(s != "erro") {
            /*dh = new DatabaseHelper(activity);
            try {
                daoPfisica = new DAOPfisica(dh.getConnectionSource());
            } catch (SQLException e) {
                e.printStackTrace();
            }

            for (Pfisica p : pfisicas) {

            }
            dh.close();*/
        }else{
            Toast.makeText(activity, "Falha ao enviar Cnpj do Cliente a Empresa", Toast.LENGTH_SHORT).show();
        }

    }
    @Override
    protected void onProgressUpdate(Integer... values) {
        super.onProgressUpdate(values);

    }

    @RequiresApi(api = Build.VERSION_CODES.KITKAT)
    @Override
    protected String doInBackground(String... strings) {

        String response = null;
        String url = null;
        url = (strings[0]);
        //Gson gson = new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create();
        Gson gson = new GsonBuilder().excludeFieldsWithoutExposeAnnotation().setDateFormat("yyyy-MM-dd").create();
        String clientes = gson.toJson(pjuridicas);

        try {
            // Cria um objeto HttpURLConnection:
            HttpURLConnection request = (HttpURLConnection) new URL(url).openConnection();

            try {
                // Define que a conexão pode enviar informações e obtê-las de volta:
                request.setDoOutput(true);
                request.setDoInput(true);

                // Define o content-type:
                request.setRequestProperty("Content-Type", "application/json");

                // Define o método da requisição:
                request.setRequestMethod("POST");

                // Conecta na URL:
                request.connect();

                // Escreve o objeto JSON usando o OutputStream da requisição:
                try (OutputStream outputStream = request.getOutputStream()) {
                    outputStream.write(clientes.getBytes("UTF-8"));
                }

                // Caso você queira usar o código HTTP para fazer alguma coisa, descomente esta linha.
                response = String.valueOf(request.getResponseCode());

                return readResponse(request);
            } finally {
                request.disconnect();
            }
        } catch (IOException ex) {
            try {
                throw new MinhaException(ex);
            } catch (MinhaException e) {
                e.printStackTrace();
            }
        }
        return null;
    }


    @RequiresApi(api = Build.VERSION_CODES.KITKAT)
    private String readResponse(HttpURLConnection request) throws IOException {
        ByteArrayOutputStream os;
        try (InputStream is = request.getInputStream()) {
            os = new ByteArrayOutputStream();
            int b;
            while ((b = is.read()) != -1) {
                os.write(b);
            }
        }
        return new String(os.toByteArray());
    }


    public static class MinhaException extends Exception {
        private static final long serialVersionUID = 1L;

        public MinhaException(Throwable cause) {
            super(cause);
        }
    }
}


