package net.ddns.scvemarchezanmetais.scvemobile.activitys;

import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Build;
import android.support.annotation.RequiresApi;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.Toast;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import net.ddns.scvemarchezanmetais.scvemobile.R;
import net.ddns.scvemarchezanmetais.scvemobile.adapters.ADP_Clientes;
import net.ddns.scvemarchezanmetais.scvemobile.banco.DatabaseHelper;
import net.ddns.scvemarchezanmetais.scvemobile.dadosws.WsPessoaPOST;
import net.ddns.scvemarchezanmetais.scvemobile.dao.DAOPessoa;
import net.ddns.scvemarchezanmetais.scvemobile.entidades.Cliente;
import net.ddns.scvemarchezanmetais.scvemobile.entidades.Pessoa;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class Clientes extends AppCompatActivity implements AdapterView.OnItemClickListener,AdapterView.OnItemLongClickListener{
    private ListView listView;
    private ADP_Clientes adp_clientes;
    private DatabaseHelper dh;
    private DAOPessoa daoPessoa;
    private Pessoa pessoa = new Pessoa();

    private AlertDialog alerta;

    EditText filtro ;
    List<Pessoa> pessoas = new ArrayList<>();
    List<Pessoa> pessoasfiltradas = new ArrayList<>();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_clientes);

        filtro =  findViewById(R.id.filtro);

        listView = (ListView) findViewById(R.id.listviewClientes);
        listView.setOnItemClickListener(this);
        listView.setOnItemLongClickListener(this);
    }

    @Override
    protected void onStart() {
        super.onStart();
        filtro.setText("");
        preencherLista();
    }

    public void preencherLista(){
        dh = new DatabaseHelper(Clientes.this);
        try {
            daoPessoa = new DAOPessoa(dh.getConnectionSource());
        }catch (SQLException e){
            e.printStackTrace();
        }

        try {
            pessoas = daoPessoa.queryForAll();
        } catch (SQLException e) {
            e.printStackTrace();
        }

        adp_clientes = new ADP_Clientes(Clientes.this,pessoas);
        listView.setAdapter(adp_clientes);

        listView.setTextFilterEnabled(true);
        filtro.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                //quando o texto é alterado chamamos o filtro.
                Pesquisar();
                adp_clientes = new ADP_Clientes(Clientes.this,pessoasfiltradas);
                listView.setAdapter(adp_clientes);
            }

            @Override
            public void afterTextChanged(Editable s) {

            }
        });
    }

    @Override
    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
        Pessoa pessoa1 = (Pessoa) parent.getItemAtPosition(position);
        Intent intent = new Intent(this, Formulario_Cliente.class);
        intent.putExtra("idpessoa",pessoa1.getIdpessoa());
        startActivity(intent);
    }

    public void Pesquisar() {
        //int textlength = filtro.getText().length();
        pessoasfiltradas.clear();

        for (int i = 0; i < pessoas.size(); i++) {
            Pessoa data = pessoas.get(i);

            if (!filtro.getText().equals("")) {
                String filtro2 = filtro.getText().toString().toLowerCase();
                String condicao = data.getNome().toLowerCase();

                if (condicao.contains(filtro2)) {
                    //se conter adiciona na lista de itens filtrados.
                    pessoasfiltradas.add(data);
                }
            }else{
                pessoasfiltradas.addAll(pessoas);
            }
        }
    }

    @Override
    public boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id) {
        final Pessoa pessoa1 = (Pessoa) parent.getItemAtPosition(position);
        ArrayList<String> itens = new ArrayList<>();

        if(pessoa1.getCanal().equals("EXTERNO")) {
            itens.add("Editar");
            itens.add("Excluir");
            itens.add("Enviar para Empresa");
        }
        //adapter utilizando um layout customizado (TextView)
        ArrayAdapter adapter = new ArrayAdapter(this, R.layout.item_alerta, itens);

        final AlertDialog.Builder builder = new AlertDialog.Builder(this);
        /*builder.setMessage("Deseja Excluir o Cliente??")
                .setPositiveButton("Sim", new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int id) {

                        if(pessoa1.getCanal() == null) {
                            try {
                                daoPessoa.delete(pessoa1);
                            } catch (SQLException e) {
                                e.printStackTrace();
                            }
                            preencherLista();
                        }else{
                            Toast.makeText(Clientes.this, "Cliente não pode ser Excluido", Toast.LENGTH_SHORT).show();
                        }
                    }
                })
                .setNegativeButton("Não", new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int id) {
                        // User cancelled the dialog
                    }
                });
*/

        builder.setTitle("O que deseja fazer ?");
        builder.setSingleChoiceItems(adapter, 0, new DialogInterface.OnClickListener() {
            @RequiresApi(api = Build.VERSION_CODES.KITKAT)
            public void onClick(DialogInterface arg0, int arg1) {
                Toast.makeText(Clientes.this, "posição selecionada=" + arg1, Toast.LENGTH_SHORT).show();
                if(arg1 == 0){//Editar
                    Intent intent = new Intent(Clientes.this, Novo_Cliente.class);
                    intent.putExtra("idpessoa",pessoa1.getIdpessoa());
                    intent.putExtra("idvendedor",pessoa1.getVendresp().getIdpessoa());
                    startActivity(intent);
                    alerta.dismiss();
                }else if(arg1 ==1){//Excluir
                   /* try {
                        daoPessoa.delete(pessoa1);
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                    preencherLista();
                    alerta.dismiss(); */
                    builder.setMessage("Deseja Excluir o Cliente??")
                            .setPositiveButton("Sim", new DialogInterface.OnClickListener() {
                                public void onClick(DialogInterface dialog, int id) {

                                    if(pessoa1.getCanal() == null) {
                                        try {
                                            daoPessoa.delete(pessoa1);
                                        } catch (SQLException e) {
                                            e.printStackTrace();
                                        }
                                        preencherLista();
                                    }else{
                                        Toast.makeText(Clientes.this, "Cliente não pode ser Excluido", Toast.LENGTH_SHORT).show();
                                    }
                                }
                            })
                            .setNegativeButton("Não", new DialogInterface.OnClickListener() {
                                public void onClick(DialogInterface dialog, int id) {
                                    alerta.dismiss();
                                }
                            });
                    alerta.dismiss();
                }else if(arg1 ==2) {//Enviar para empresa
                    Toast.makeText(Clientes.this, "teste de envio para empresa", Toast.LENGTH_SHORT).show();

                    List<Pessoa> pessoas = new ArrayList<>();
                    pessoas.add(pessoa1);
                    SharedPreferences lt = Clientes.this.getPreferences(Context.MODE_PRIVATE);
                    SharedPreferences.Editor editor = lt.edit();
                    String configJ = lt.getString("config","vazio");
                    //busca dados dos tipo de enderecos
                    WsPessoaPOST wsPessoaPOST = new WsPessoaPOST(Clientes.this,pessoas);
                    wsPessoaPOST.execute("http://scvemarchezanmetais.ddns.net/SCVE/reset/pessoas/gravar","","");
                   /* try {
                        sendPost("http://scvemarchezanmetais.ddns.net/SCVE/reset/pessoas/gravar",cliente);
                    } catch (MinhaException e) {
                        e.printStackTrace();
                    }*/
                    alerta.dismiss();
                }
            }
        });
        alerta = builder.create();
        //Exibe
        alerta.show();
        return true;
    }


}
