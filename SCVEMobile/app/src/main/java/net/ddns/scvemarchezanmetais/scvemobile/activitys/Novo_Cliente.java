package net.ddns.scvemarchezanmetais.scvemobile.activitys;

import android.content.DialogInterface;
import android.content.Intent;
import android.os.Build;
import android.os.Bundle;
import android.support.annotation.RequiresApi;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.EditText;
import android.widget.ListAdapter;
import android.widget.ListView;
import android.widget.TabHost;
import android.widget.Toast;

import net.ddns.scvemarchezanmetais.scvemobile.R;
import net.ddns.scvemarchezanmetais.scvemobile.adapters.ADP_Clientes_Contatos;
import net.ddns.scvemarchezanmetais.scvemobile.adapters.ADP_Clientes_Endereco;
import net.ddns.scvemarchezanmetais.scvemobile.adapters.MaskEditUtil;
import net.ddns.scvemarchezanmetais.scvemobile.banco.DatabaseHelper;
import net.ddns.scvemarchezanmetais.scvemobile.dao.DAOContato;
import net.ddns.scvemarchezanmetais.scvemobile.dao.DAOEndereco;
import net.ddns.scvemarchezanmetais.scvemobile.dao.DAOJuridica;
import net.ddns.scvemarchezanmetais.scvemobile.dao.DAOPessoa;
import net.ddns.scvemarchezanmetais.scvemobile.dao.DAOPfisica;
import net.ddns.scvemarchezanmetais.scvemobile.dao.DAOVendedor;
import net.ddns.scvemarchezanmetais.scvemobile.entidades.Contato;
import net.ddns.scvemarchezanmetais.scvemobile.entidades.Endereco;
import net.ddns.scvemarchezanmetais.scvemobile.entidades.Pessoa;
import net.ddns.scvemarchezanmetais.scvemobile.entidades.Pfisica;
import net.ddns.scvemarchezanmetais.scvemobile.entidades.Pjuridica;

import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;

public class Novo_Cliente extends AppCompatActivity implements AdapterView.OnItemLongClickListener {
    String idvendedor;
    EditText p_nome, p_dtcadastro, f_cpf,f_rg, f_dtnasc, j_cnpj,j_razaosocial,j_inscestadual,j_suframa;
    String formato = "dd/MM/yyyy";
    Pessoa pessoa = new Pessoa();
    Pjuridica pjuridica = new Pjuridica();
    Pfisica pfisica = new Pfisica();

    DatabaseHelper dh;

    private AlertDialog alerta;

    DAOPessoa daoPessoa;
    DAOEndereco daoEndereco;
    DAOContato daoContato;
    DAOPfisica daoPfisica;
    DAOJuridica daoJuridica;
    DAOVendedor daoVendedor;

    List<Endereco> enderecos = new ArrayList<>();
    List<Contato> contatos = new ArrayList<>();

    TabHost tabHost;
    TabHost tabHost2;

    ListView listViewEndereco;
    ListView listViewContato;
    int o =0;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_novo__cliente);
        dh = new DatabaseHelper(Novo_Cliente.this);
        try {
            daoPessoa = new DAOPessoa(dh.getConnectionSource());
            daoPfisica = new DAOPfisica(dh.getConnectionSource());
            daoJuridica = new DAOJuridica(dh.getConnectionSource());
            daoVendedor = new DAOVendedor(dh.getConnectionSource());
        }catch (SQLException e){
            e.printStackTrace();
        }
        tabHost = findViewById(R.id.tabhost);
        tabHost2 = findViewById(R.id.tabhost2);
        tabHost.setup();
        tabHost2.setup();

        TabHost.TabSpec tfisica = tabHost.newTabSpec("Fisíca");
        tfisica.setContent(R.id.Fisíca);
        tfisica.setIndicator("Fisíca");

        TabHost.TabSpec tjuridica = tabHost.newTabSpec("Jurídica");
        tjuridica.setContent(R.id.Jurídica);
        tjuridica.setIndicator("Jurídica");

        TabHost.TabSpec penderecos = tabHost2.newTabSpec("Endereços");
        penderecos.setContent(R.id.Endereços);
        penderecos.setIndicator("Endereços");

        TabHost.TabSpec pcontatos = tabHost2.newTabSpec("Contatos");
        pcontatos.setContent(R.id.Contatos);
        pcontatos.setIndicator("Contatos");

        tabHost.addTab(tfisica);
        tabHost.addTab(tjuridica);
        tabHost2.addTab(penderecos);
        tabHost2.addTab(pcontatos);

        p_nome = findViewById(R.id.p_nome);
        p_nome.requestFocus();
        //p_dtcadastro = findViewById(R.id.p_dtcadastro);
        f_cpf = findViewById(R.id.f_cpf);
        f_cpf.addTextChangedListener(MaskEditUtil.mask(f_cpf, MaskEditUtil.FORMAT_CPF));
        f_rg = findViewById(R.id.f_rg);
        f_dtnasc = findViewById(R.id.f_dtnascimento);
        f_dtnasc.addTextChangedListener(MaskEditUtil.mask(f_dtnasc, MaskEditUtil.FORMAT_DATE));
        j_cnpj = findViewById(R.id.j_cnpj);
        j_cnpj.addTextChangedListener(MaskEditUtil.mask(j_cnpj, MaskEditUtil.FORMAT_CNPJ));
        j_inscestadual = findViewById(R.id.j_inscestadual);
        j_razaosocial = findViewById(R.id.j_razaosocial);
        j_suframa = findViewById(R.id.j_suframa);

        listViewEndereco = (ListView) findViewById(R.id.listviewEndereco);
        listViewEndereco.setOnItemLongClickListener(this);

        listViewContato = (ListView) findViewById(R.id.listviewContato);
        listViewContato.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
            @Override
            public boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id) {
                final Contato contato = (Contato) parent.getItemAtPosition(position);
                //Toast.makeText(this, "CEP Endereco"+endereco.getCep().toString(), Toast.LENGTH_SHORT).show();
                ArrayList<String> itens = new ArrayList<>();

                itens.add("Editar");
                itens.add("Excluir");

                //adapter utilizando um layout customizado (TextView)
                ArrayAdapter adapter = new ArrayAdapter(Novo_Cliente.this, R.layout.item_alerta, itens);

                final AlertDialog.Builder builder = new AlertDialog.Builder(Novo_Cliente.this);

                builder.setTitle("O que deseja fazer ?");
                builder.setSingleChoiceItems(adapter, 0, new DialogInterface.OnClickListener() {
                    @RequiresApi(api = Build.VERSION_CODES.KITKAT)
                    public void onClick(DialogInterface arg0, int arg1) {
                        //Toast.makeText(Clientes.this, "posição selecionada=" + arg1, Toast.LENGTH_SHORT).show();
                        if(arg1 == 0){//Editar
                            o=1;
                            Intent intent = new Intent(Novo_Cliente.this, Novo_Cliente_Contato.class);
                            intent.putExtra("idpessoa",contato.getPessoa().getIdpessoa());
                            intent.putExtra("idcontato",contato.getIdcontato() );
                            startActivity(intent);
                            alerta.dismiss();
                        }else if(arg1 ==1){//Excluir
                            try {
                                daoContato.delete(contato);
                            } catch (SQLException e) {
                                e.printStackTrace();
                            }
                            //preencherEnderecos();
                            preencherContatos();
                            alerta.dismiss();
                        }
                    }
                });
                alerta = builder.create();
                //Exibe
                alerta.show();
                return false;
            }
            });

        Bundle bundle = getIntent().getExtras();
        idvendedor = bundle.getString("idvendedor");

    }
    @Override
    protected void onStart() {
        super.onStart();
        preencherPessoa();
        preencherEnderecos();
        preencherContatos();

    }

    private void preencherEnderecos() {
        //dh = new DatabaseHelper(Novo_Cliente.this);
        try {
            daoEndereco = new DAOEndereco(dh.getConnectionSource());
        }catch (SQLException e){
            e.printStackTrace();
        }

        if (o==1 ) {
            try {
                enderecos = new ArrayList<>();
                enderecos.addAll(daoEndereco.queryBuilder().where().eq("idpessoa", pessoa.getIdpessoa()).query());
            } catch (SQLException e) {
                e.printStackTrace();
            }
            ADP_Clientes_Endereco adp_clientes_endereco = new ADP_Clientes_Endereco(Novo_Cliente.this,enderecos);
            listViewEndereco.setAdapter(adp_clientes_endereco);
            //setListViewHeightBasedOnItems(listViewEndereco);
            setListViewHeightBasedOnChildren(listViewEndereco);
        }



    }

    private void preencherContatos() {
        //dh = new DatabaseHelper(Novo_Cliente.this);
        try {
            daoContato = new DAOContato(dh.getConnectionSource());
        }catch (SQLException e){
            e.printStackTrace();
        }

        if (o==1 )  {
            try {
                contatos = new ArrayList<>();
                contatos.addAll(daoContato.queryBuilder().where().eq("idpessoa", pessoa.getIdpessoa()).query());
            } catch (SQLException e) {
                e.printStackTrace();
            }
            ADP_Clientes_Contatos adp_clientes_contatos = new ADP_Clientes_Contatos(Novo_Cliente.this,contatos);
            listViewContato.setAdapter(adp_clientes_contatos);
            //setListViewHeightBasedOnItems(listViewContato);
            setListViewHeightBasedOnChildren(listViewContato);
        }



    }

    public void gravacliente(View view) throws ParseException {
        pessoa.setCanal("EXTERNO");
        pessoa.setNome(p_nome.getText().toString());
        /*cria um id com base na data atual*/
        Date d = new Date();
        DateFormat d1 = new SimpleDateFormat("ddhhmm");

        if(pessoa.getIdpessoa() !=null) {

        }else{
            pessoa.setIdpessoa(Integer.parseInt(d1.format(d)));
            pessoa.setDtcadastro(d);
            try {
                pessoa.setVendresp(daoVendedor.queryForId(Integer.parseInt(idvendedor.toString())));
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

            try {
                if (f_cpf.getText().length() > 0) {
                    pessoa.setTipojf("F");
                    daoPessoa.createOrUpdate(pessoa);
                    pfisica.setCpf(f_cpf.getText().toString());
                    pfisica.setRg(f_rg.getText().toString());
                    SimpleDateFormat formatter = new SimpleDateFormat(formato);
                    pfisica.setDtnasc(formatter.parse(f_dtnasc.getText().toString()));
                    pfisica.setPessoa(pessoa);
                    daoPfisica.createOrUpdate(pfisica);
                }

                if (j_cnpj.getText().length() > 0) {
                    pessoa.setTipojf("J");
                    daoPessoa.createOrUpdate(pessoa);
                    pjuridica.setCnpj(j_cnpj.getText().toString());
                    pjuridica.setInsc_estadual(j_inscestadual.getText().toString());
                    pjuridica.setInsc_suframa(j_suframa.getText().toString());
                    pjuridica.setRazao_social(j_razaosocial.getText().toString());
                    pjuridica.setPessoa(pessoa);
                    daoJuridica.createOrUpdate(pjuridica);
                }
                Toast.makeText(this, "Cliente Cadastrado com Sucesso !", Toast.LENGTH_SHORT).show();
                o=1;
                //finish();
            } catch (SQLException e) {
                e.printStackTrace();
            }
    }

    /*preenchi campos para edicao editar*/
    private void preencherPessoa() {
        if(o==0) {
            Bundle bundle = getIntent().getExtras();
            if (bundle != null && bundle.containsKey("idpessoa")) {
                /*dados do cliente*/
                try {
                    pessoa = daoPessoa.queryForId(bundle.getInt("idpessoa"));

                    p_nome.setText(pessoa.getNome());
                    if (pessoa.getTipojf().equals("F")) {
                        o = 1;
                        //Pfisica pfisica;
                        pfisica = daoPfisica.queryBuilder().where().eq("idpessoa", pessoa.getIdpessoa()).queryForFirst();

                        SimpleDateFormat formatter = new SimpleDateFormat(formato);
                        f_dtnasc.setText(formatter.format(pfisica.getDtnasc()));
                        f_cpf.setText(pfisica.getCpf());
                        f_rg.setText(pfisica.getRg());

                        tabHost.setCurrentTab(0);

                    } else if (pessoa.getTipojf().equals("J")) {
                        o = 1;
                        //Pjuridica pjuridica;
                        pjuridica = daoJuridica.queryBuilder().where().eq("idpessoa", pessoa.getIdpessoa()).queryForFirst();

                        j_suframa.setText(pjuridica.getInsc_suframa());
                        j_razaosocial.setText(pjuridica.getRazao_social());
                        j_inscestadual.setText(pjuridica.getInsc_estadual());
                        j_cnpj.setText(pjuridica.getCnpj());

                        tabHost.setCurrentTab(1);
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }

        }
    }

    /*teste*/
    /*public static boolean setListViewHeightBasedOnItems(ListView listView) {

        ListAdapter listAdapter = listView.getAdapter();
        if (listAdapter != null) {

            int numberOfItems = listAdapter.getCount();

            // Get total height of all items.
            int totalItemsHeight = 0;
            for (int itemPos = 0; itemPos < numberOfItems; itemPos++) {

                float px = 300 * (listView.getResources().getDisplayMetrics().density);

                View item = listAdapter.getView(itemPos, null, listView);
                item.measure(View.MeasureSpec.makeMeasureSpec((int)px, View.MeasureSpec.AT_MOST), View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED));
                totalItemsHeight += item.getMeasuredHeight();
            }

            // Get total height of all item dividers.
            int totalDividersHeight = listView.getDividerHeight() * (numberOfItems - 1);
            // Get padding
            int totalPadding = listView.getPaddingTop() + listView.getPaddingBottom();

            // Set list height.
            ViewGroup.LayoutParams params = listView.getLayoutParams();
            params.height = totalItemsHeight + totalDividersHeight + totalPadding;
            listView.setLayoutParams(params);
            listView.requestLayout();

            return true;

        } else {
            return false;
        }

    }*/

    public static void setListViewHeightBasedOnChildren(ListView listView) {
        ListAdapter listAdapter = listView.getAdapter();
        if (listAdapter == null) {
            // pre-condition
            return;
        }

        int totalHeight = 0;
        int desiredWidth = View.MeasureSpec.makeMeasureSpec(listView.getWidth(), View.MeasureSpec.AT_MOST);
        for (int i = 0; i < listAdapter.getCount(); i++) {
            View listItem = listAdapter.getView(i, null, listView);
            listItem.measure(desiredWidth, View.MeasureSpec.UNSPECIFIED);
            totalHeight += listItem.getMeasuredHeight();
        }

        ViewGroup.LayoutParams params = listView.getLayoutParams();
        params.height = totalHeight + (listView.getDividerHeight() * (listAdapter.getCount() - 1));
        listView.setLayoutParams(params);
        listView.requestLayout();
    }


    public void novoendereco(View view) throws SQLException {
        try {
            gravacliente(view);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        Intent intent = new Intent(this,Novo_Cliente_Endereco.class);
        intent.putExtra("idpessoa",pessoa.getIdpessoa());
        startActivity(intent);
    }

    public void novocontato(View view) throws SQLException {
        try {
            gravacliente(view);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        Intent intent = new Intent(this,Novo_Cliente_Contato.class);
        intent.putExtra("idpessoa",pessoa.getIdpessoa());
        startActivity(intent);
    }


    //opções de editar/excluir enderecos
    @Override
    public boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id) {
        final Endereco endereco = (Endereco) parent.getItemAtPosition(position);
        //Toast.makeText(this, "CEP Endereco"+endereco.getCep().toString(), Toast.LENGTH_SHORT).show();
        ArrayList<String> itens = new ArrayList<>();

        itens.add("Editar");
        itens.add("Excluir");

        //adapter utilizando um layout customizado (TextView)
        ArrayAdapter adapter = new ArrayAdapter(this, R.layout.item_alerta, itens);

        final AlertDialog.Builder builder = new AlertDialog.Builder(this);

        builder.setTitle("O que deseja fazer ?");
        builder.setSingleChoiceItems(adapter, 0, new DialogInterface.OnClickListener() {
            @RequiresApi(api = Build.VERSION_CODES.KITKAT)
            public void onClick(DialogInterface arg0, int arg1) {
                //Toast.makeText(Clientes.this, "posição selecionada=" + arg1, Toast.LENGTH_SHORT).show();
                if(arg1 == 0){//Editar
                    o=1;
                    Intent intent = new Intent(Novo_Cliente.this, Novo_Cliente_Endereco.class);
                    intent.putExtra("idpessoa",endereco.getPessoa().getIdpessoa());
                    intent.putExtra("idenderecomobile",endereco.getIdmobile());
                    startActivity(intent);
                    alerta.dismiss();
                }else if(arg1 ==1){//Excluir
                    try {
                        daoEndereco.delete(endereco);
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                    preencherEnderecos();
                    //preencherContatos();
                    alerta.dismiss();
                }
            }
        });
        alerta = builder.create();
        //Exibe
        alerta.show();

        return true;
    }
}
