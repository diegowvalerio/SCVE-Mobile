package net.ddns.scvemarchezanmetais.scvemobile.activitys;

import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.ListAdapter;
import android.widget.ListView;
import android.widget.TabHost;

import net.ddns.scvemarchezanmetais.scvemobile.R;
import net.ddns.scvemarchezanmetais.scvemobile.adapters.ADP_Clientes_Contatos;
import net.ddns.scvemarchezanmetais.scvemobile.adapters.ADP_Clientes_Endereco;
import net.ddns.scvemarchezanmetais.scvemobile.banco.DatabaseHelper;
import net.ddns.scvemarchezanmetais.scvemobile.dao.DAOContato;
import net.ddns.scvemarchezanmetais.scvemobile.dao.DAOEndereco;
import net.ddns.scvemarchezanmetais.scvemobile.dao.DAOJuridica;
import net.ddns.scvemarchezanmetais.scvemobile.dao.DAOPessoa;
import net.ddns.scvemarchezanmetais.scvemobile.dao.DAOPfisica;
import net.ddns.scvemarchezanmetais.scvemobile.entidades.Contato;
import net.ddns.scvemarchezanmetais.scvemobile.entidades.Endereco;
import net.ddns.scvemarchezanmetais.scvemobile.entidades.Pessoa;
import net.ddns.scvemarchezanmetais.scvemobile.entidades.Pfisica;
import net.ddns.scvemarchezanmetais.scvemobile.entidades.Pjuridica;

import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class Novo_Cliente extends AppCompatActivity {

    EditText p_nome, p_dtcadastro, f_cpf,f_rg, f_dtnasc, j_cnpj,j_razaosocial,j_inscestadual,j_suframa;
    String formato = "dd/MM/yyyy";
    Pessoa pessoa = new Pessoa();

    DatabaseHelper dh;

    DAOPessoa daoPessoa;
    DAOEndereco daoEndereco;
    DAOContato daoContato;
    DAOPfisica daoPfisica;
    DAOJuridica daoJuridica;

    List<Endereco> enderecos = new ArrayList<>();
    List<Contato> contatos = new ArrayList<>();

    TabHost tabHost;
    TabHost tabHost2;

    ListView listViewEndereco;
    ListView listViewContato;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_novo__cliente);

        tabHost = findViewById(R.id.tabhost);
        tabHost2 = findViewById(R.id.tabhost2);
        tabHost.setup();
        tabHost2.setup();

        TabHost.TabSpec tfisica = tabHost.newTabSpec("Fisíca");
        tfisica.setContent(R.id.Fisíca);
        tfisica.setIndicator("Fisíca");

        TabHost.TabSpec tjuridica = tabHost.newTabSpec("Jurídica");
        tjuridica.setContent(R.id.Jurídica);
        tjuridica.setIndicator("Jurídica");

        TabHost.TabSpec penderecos = tabHost2.newTabSpec("Endereços");
        penderecos.setContent(R.id.Endereços);
        penderecos.setIndicator("Endereços");

        TabHost.TabSpec pcontatos = tabHost2.newTabSpec("Contatos");
        pcontatos.setContent(R.id.Contatos);
        pcontatos.setIndicator("Contatos");

        tabHost.addTab(tfisica);
        tabHost.addTab(tjuridica);
        tabHost2.addTab(penderecos);
        tabHost2.addTab(pcontatos);

        p_nome = findViewById(R.id.p_nome);
        //p_dtcadastro = findViewById(R.id.p_dtcadastro);
        f_cpf = findViewById(R.id.f_cpf);
        f_rg = findViewById(R.id.f_rg);
        f_dtnasc = findViewById(R.id.f_dtnascimento);
        j_cnpj = findViewById(R.id.j_cnpj);
        j_inscestadual = findViewById(R.id.j_inscestadual);
        j_razaosocial = findViewById(R.id.j_razaosocial);
        j_suframa = findViewById(R.id.j_suframa);


    }
    @Override
    protected void onStart() {
        super.onStart();
        preencherEnderecos();
        preencherContatos();
    }

    private void preencherEnderecos() {
        dh = new DatabaseHelper(Novo_Cliente.this);
        try {
            daoEndereco = new DAOEndereco(dh.getConnectionSource());
        }catch (SQLException e){
            e.printStackTrace();
        }

        Bundle bundle = getIntent().getExtras();
        if (bundle!=null && bundle.containsKey("idpessoa")) {
            try {
                enderecos.addAll(daoEndereco.queryBuilder().where().eq("idpessoa", bundle.getInt("idpessoa")).query());
            } catch (SQLException e) {
                e.printStackTrace();
            }
            ADP_Clientes_Endereco adp_clientes_endereco = new ADP_Clientes_Endereco(Novo_Cliente.this,enderecos);
            listViewEndereco.setAdapter(adp_clientes_endereco);
            setListViewHeightBasedOnItems(listViewEndereco);
        }



    }

    private void preencherContatos() {
        dh = new DatabaseHelper(Novo_Cliente.this);
        try {
            daoContato = new DAOContato(dh.getConnectionSource());
        }catch (SQLException e){
            e.printStackTrace();
        }

        Bundle bundle = getIntent().getExtras();
        if (bundle!=null && bundle.containsKey("idpessoa")) {
            try {
                contatos.addAll(daoContato.queryBuilder().where().eq("idpessoa", bundle.getInt("idpessoa")).query());
            } catch (SQLException e) {
                e.printStackTrace();
            }
            ADP_Clientes_Contatos adp_clientes_contatos = new ADP_Clientes_Contatos(Novo_Cliente.this,contatos);
            listViewContato.setAdapter(adp_clientes_contatos);
            setListViewHeightBasedOnItems(listViewContato);
        }



    }

    public void gravacliente(View view) throws ParseException {
        dh = new DatabaseHelper(Novo_Cliente.this);
        try {
            daoPessoa = new DAOPessoa(dh.getConnectionSource());
            daoPfisica = new DAOPfisica(dh.getConnectionSource());
            daoJuridica = new DAOJuridica(dh.getConnectionSource());
        }catch (SQLException e){
            e.printStackTrace();
        }

        pessoa.setCanal("EXTERNO");
        pessoa.setNome(p_nome.getText().toString());
        /*cria um id com base na data atual*/
        Date d = new Date();
        DateFormat d1 = new SimpleDateFormat("ddhhmm");
        pessoa.setIdpessoa(Integer.parseInt(d1.format(d)));
        pessoa.setDtcadastro(d);

        try {
            daoPessoa.create(pessoa);
        } catch (SQLException e) {
            e.printStackTrace();
        }

    }

    /*teste*/
    public static boolean setListViewHeightBasedOnItems(ListView listView) {

        ListAdapter listAdapter = listView.getAdapter();
        if (listAdapter != null) {

            int numberOfItems = listAdapter.getCount();

            // Get total height of all items.
            int totalItemsHeight = 0;
            for (int itemPos = 0; itemPos < numberOfItems; itemPos++) {

                float px = 300 * (listView.getResources().getDisplayMetrics().density);

                View item = listAdapter.getView(itemPos, null, listView);
                item.measure(View.MeasureSpec.makeMeasureSpec((int)px, View.MeasureSpec.AT_MOST), View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED));
                totalItemsHeight += item.getMeasuredHeight();
            }

            // Get total height of all item dividers.
            int totalDividersHeight = listView.getDividerHeight() * (numberOfItems - 1);
            // Get padding
            int totalPadding = listView.getPaddingTop() + listView.getPaddingBottom();

            // Set list height.
            ViewGroup.LayoutParams params = listView.getLayoutParams();
            params.height = totalItemsHeight + totalDividersHeight + totalPadding;
            listView.setLayoutParams(params);
            listView.requestLayout();

            return true;

        } else {
            return false;
        }

    }
}
