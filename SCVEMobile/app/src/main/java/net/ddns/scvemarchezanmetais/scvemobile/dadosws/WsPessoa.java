package net.ddns.scvemarchezanmetais.scvemobile.dadosws;

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.SharedPreferences;
import android.os.AsyncTask;
import android.view.View;
import android.widget.ProgressBar;
import com.google.gson.reflect.TypeToken;
import com.google.gson.Gson;

import net.ddns.scvemarchezanmetais.scvemobile.R;
import net.ddns.scvemarchezanmetais.scvemobile.banco.DatabaseHelper;
import net.ddns.scvemarchezanmetais.scvemobile.dao.DAOPessoa;
import net.ddns.scvemarchezanmetais.scvemobile.entidades.Pessoa;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.sql.SQLException;
import java.util.List;

public class WsPessoa extends AsyncTask<String,Integer,String> {
    Activity activity;
    ProgressBar progressBar;
    ProgressDialog load;

    private DatabaseHelper dh;
    private DAOPessoa daoPessoa;
    private Pessoa pessoa = new Pessoa();

    public WsPessoa(Activity activity){
        this.activity = activity;
    }

    @Override
    protected void onPreExecute() {
        super.onPreExecute();
        progressBar = (ProgressBar) activity.findViewById(R.id.progressBar);
        progressBar.setVisibility(View.VISIBLE);
        load = ProgressDialog.show(activity, "Por favor Aguarde ...",
                "Baixando Clientes ...");
    }

    @Override
    protected void onPostExecute(String s) {
        super.onPostExecute(s);
        Gson gson = new Gson();

        List<Pessoa> pessoas = gson.fromJson(s, new TypeToken<List<Pessoa>>(){}.getType());
        dh = new DatabaseHelper(activity);
        try {
            daoPessoa = new DAOPessoa(dh.getConnectionSource());
        } catch (SQLException e) {
            e.printStackTrace();
        }

        try {
            for (Pessoa p : pessoas) {
                 daoPessoa.create(p);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        progressBar.setVisibility(View.INVISIBLE);
        load.dismiss();

        /*SharedPreferences lt = activity.getPreferences(Context.MODE_PRIVATE);
        SharedPreferences.Editor editor = lt.edit();
        String configJ = lt.getString("config","vazio");
        //busca dados dos tipo de enderecos
        WsTipoEndereco wsTipoEndereco = new WsTipoEndereco(activity);
        wsTipoEndereco.execute(configJ+"/SCVE/reset/tipoenderecos","","");
*/
        dh.close();
    }
    @Override
    protected void onProgressUpdate(Integer... values) {
        super.onProgressUpdate(values);
        progressBar.setProgress(values[0]);
    }

    @Override
    protected String doInBackground(String... strings) {
        String jsonRetorno=null;
        try {
            URL url = new URL(strings[0]);
            InputStream stream = url.openStream();
            BufferedReader bufferedReader =
                    new BufferedReader(new InputStreamReader(stream));
            StringBuilder builder = new StringBuilder();
            onProgressUpdate(10);
            String linha;
            while ((linha = bufferedReader.readLine())!=null){
                builder.append(linha);
            }
            jsonRetorno = builder.toString();
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return jsonRetorno;
    }
}


