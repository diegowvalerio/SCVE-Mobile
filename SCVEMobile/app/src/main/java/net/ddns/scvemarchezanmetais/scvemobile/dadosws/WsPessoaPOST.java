package net.ddns.scvemarchezanmetais.scvemobile.dadosws;

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.SharedPreferences;
import android.os.AsyncTask;
import android.os.Build;
import android.support.annotation.RequiresApi;
import android.util.Log;
import android.view.View;
import android.widget.ProgressBar;
import android.widget.Toast;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.reflect.TypeToken;
import com.j256.ormlite.stmt.UpdateBuilder;

import net.ddns.scvemarchezanmetais.scvemobile.R;
import net.ddns.scvemarchezanmetais.scvemobile.banco.DatabaseHelper;
import net.ddns.scvemarchezanmetais.scvemobile.dao.DAOCidade;
import net.ddns.scvemarchezanmetais.scvemobile.dao.DAOContato;
import net.ddns.scvemarchezanmetais.scvemobile.dao.DAOEndereco;
import net.ddns.scvemarchezanmetais.scvemobile.dao.DAOJuridica;
import net.ddns.scvemarchezanmetais.scvemobile.dao.DAOPessoa;
import net.ddns.scvemarchezanmetais.scvemobile.dao.DAOPfisica;
import net.ddns.scvemarchezanmetais.scvemobile.entidades.Cidade;
import net.ddns.scvemarchezanmetais.scvemobile.entidades.Contato;
import net.ddns.scvemarchezanmetais.scvemobile.entidades.Endereco;
import net.ddns.scvemarchezanmetais.scvemobile.entidades.Pessoa;
import net.ddns.scvemarchezanmetais.scvemobile.entidades.Pfisica;
import net.ddns.scvemarchezanmetais.scvemobile.entidades.Pjuridica;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class WsPessoaPOST extends AsyncTask<String,Integer,String> {
    Activity activity;


    private DatabaseHelper dh;
    private DAOPessoa daoPessoa;
    private DAOContato daoContato;
    private DAOEndereco daoEndereco;
    private DAOPfisica daoPfisica;
    private DAOJuridica daoJuridica;
    private List<Pessoa> pessoas = new ArrayList<>();

    private List<Pfisica> pfisicas = new ArrayList<>();
    private List<Pjuridica> pjuridicas = new ArrayList<>();

    public WsPessoaPOST(Activity activity, List<Pessoa> pessoas){
        this.activity = activity;
        this.pessoas = pessoas;
    }

    @Override
    protected void onPreExecute() {
        super.onPreExecute();
        //ProgressDialog.show(activity, "Por favor Aguarde ...","Enviando Cliente ...");
        Toast.makeText(activity, "Enviando Cliente", Toast.LENGTH_SHORT).show();
    }

    @RequiresApi(api = Build.VERSION_CODES.KITKAT)
    @Override
    protected void onPostExecute(String s) {
        super.onPostExecute(s);
       // Toast.makeText(activity, "" + s, Toast.LENGTH_SHORT).show();
        Log.i("Envia Cliente","Resposta do Servidor:"+s);
        if(s != "erro" && s != null && s != "") {
            dh = new DatabaseHelper(activity);
            try {
                daoPessoa = new DAOPessoa(dh.getConnectionSource());
                daoContato = new DAOContato(dh.getConnectionSource());
                daoEndereco = new DAOEndereco(dh.getConnectionSource());
                daoPfisica = new DAOPfisica(dh.getConnectionSource());
                daoJuridica = new DAOJuridica(dh.getConnectionSource());


            //Toast.makeText(activity, "" + s, Toast.LENGTH_SHORT).show();
            for (Pessoa p : pessoas) {
                try {
                    /*update no pessoa*/
                    int cod = p.getIdpessoa();
                    p.setCanal("INTERNO");
                    daoPessoa.update(p);
                    daoPessoa.updateId(p, Integer.parseInt(s));

                    List<Contato> contatos = new ArrayList<>();
                    contatos.addAll(daoContato.queryBuilder().where().eq("idpessoa",cod).query());
                    for(Contato c : contatos){
                        c.setPessoa(p);
                        daoContato.update(c);
                    }

                    List<Endereco> enderecos = new ArrayList<>();
                    enderecos.addAll(daoEndereco.queryBuilder().where().eq("idpessoa",cod).query());
                    for(Endereco e : enderecos){
                        e.setPessoa(p);
                        daoEndereco.update(e);
                    }

                    if(p.getTipojf().equals("F")) {
                        Pfisica pfisica = daoPfisica.queryBuilder().where().eq("idpessoa", cod).queryForFirst();
                        pfisica.setPessoa(p);
                        daoPfisica.update(pfisica);
                        /*adciona a lista para mandar a empresa os dados de pesssoa fisica*/
                        pfisicas.add(pfisica);
                    }else{
                        Pjuridica pjuridica = daoJuridica.queryBuilder().where().eq("idpessoa",cod).queryForFirst();
                        pjuridica.setPessoa(p);
                        daoJuridica.update(pjuridica);
                        /*adciona a lista para mandar a empresa os dados de pesssoa juridica*/
                        pjuridicas.add(pjuridica);
                    }

                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if(pfisicas.size()>0) {

                WsPfisicaPOST wsPfisicaPOST = new WsPfisicaPOST(activity, pfisicas);
                wsPfisicaPOST.execute("http://scvemarchezanmetais.ddns.net/SCVE/reset/tipojf/gravarpfisica", "", "");
            }
            if(pjuridicas.size()>0){
                //gravarpjuridica
                WsPjuridicaPOST wsPjuridicaPOST = new WsPjuridicaPOST(activity,pjuridicas);
                wsPjuridicaPOST.execute("http://scvemarchezanmetais.ddns.net/SCVE/reset/tipojf/gravarpjuridica", "", "");
            }

            } catch (SQLException e) {
                e.printStackTrace();
            }
            dh.close();
        }else{
            Toast.makeText(activity, "Falha ao enviar Cliente a Empresa", Toast.LENGTH_SHORT).show();
            Log.i("Envia Cliente","Falha ao enviar cliente a Empresa");
        }

        if(s == null || s == ""){
            Toast.makeText(activity, "Erro de Conexão Com servidor", Toast.LENGTH_SHORT).show();
            Log.i("Envia Cliente","Erro de Conexão Com servidor");
        }

    }
    @Override
    protected void onProgressUpdate(Integer... values) {
        super.onProgressUpdate(values);

    }

    @RequiresApi(api = Build.VERSION_CODES.KITKAT)
    @Override
    protected String doInBackground(String... strings) {

        String response = null;
        String url = null;
        url = (strings[0]);
        //Gson gson = new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create();
        Gson gson = new GsonBuilder().excludeFieldsWithoutExposeAnnotation().setDateFormat("yyyy-MM-dd").create();
        String clientes = gson.toJson(pessoas);

        try {
            // Cria um objeto HttpURLConnection:
            HttpURLConnection request = (HttpURLConnection) new URL(url).openConnection();

            try {
                // Define que a conexão pode enviar informações e obtê-las de volta:
                request.setDoOutput(true);
                request.setDoInput(true);

                // Define o content-type:
                request.setRequestProperty("Content-Type", "application/json");

                // Define o método da requisição:
                request.setRequestMethod("POST");

                //define 10 segundos de tempo para conseguir se conectar
                request.setConnectTimeout(10000);
                // Conecta na URL:
                request.connect();

                //Log.i("Codigo de Resposta",""+res);
                    // Escreve o objto JSON usando o OutputStream da requisição:
                    try (OutputStream outputStream = request.getOutputStream()) {
                        outputStream.write(clientes.getBytes("UTF-8"));
                    }
                // Caso você queira usar o código HTTP para fazer alguma coisa, descomente esta linha.
                //response = String.valueOf(request.getResponseCode());

                return readResponse(request);
            } finally {
                request.disconnect();
            }
        } catch (IOException ex) {
            try {
                throw new MinhaException(ex);
            } catch (MinhaException e) {
                e.printStackTrace();
            }
        }
        return null;
    }


    @RequiresApi(api = Build.VERSION_CODES.KITKAT)
    private String readResponse(HttpURLConnection request) throws IOException {
        ByteArrayOutputStream os;
        try (InputStream is = request.getInputStream()) {
            os = new ByteArrayOutputStream();
            int b;
            while ((b = is.read()) != -1) {
                os.write(b);
            }
        }
        return new String(os.toByteArray());
    }


    public static class MinhaException extends Exception {
        private static final long serialVersionUID = 1L;

        public MinhaException(Throwable cause) {
            super(cause);
        }
    }
}


