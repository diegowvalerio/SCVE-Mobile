package net.ddns.scvemarchezanmetais.scvemobile.activitys;

import android.content.Intent;
import android.content.SharedPreferences;
import android.preference.PreferenceManager;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.ListAdapter;
import android.widget.ListView;
import android.widget.Toast;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;

import net.ddns.scvemarchezanmetais.scvemobile.R;
import net.ddns.scvemarchezanmetais.scvemobile.adapters.ADP_Items;
import net.ddns.scvemarchezanmetais.scvemobile.adapters.ADP_Produtos;
import net.ddns.scvemarchezanmetais.scvemobile.banco.DatabaseHelper;
import net.ddns.scvemarchezanmetais.scvemobile.dao.DAOCondPagto;
import net.ddns.scvemarchezanmetais.scvemobile.dao.DAOFormaPag;
import net.ddns.scvemarchezanmetais.scvemobile.dao.DAOItem;
import net.ddns.scvemarchezanmetais.scvemobile.dao.DAOMovimento;
import net.ddns.scvemarchezanmetais.scvemobile.dao.DAOPessoa;
import net.ddns.scvemarchezanmetais.scvemobile.dao.DAOTipoMv;
import net.ddns.scvemarchezanmetais.scvemobile.dao.DAOVendedor;
import net.ddns.scvemarchezanmetais.scvemobile.entidades.Item;
import net.ddns.scvemarchezanmetais.scvemobile.entidades.Movimento;

import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class Novo_Pedido extends AppCompatActivity {
    EditText observacao,totalvenda,cliente,tipoMv,condPagto,formaPag;
    String formato = "dd/MM/yyyy";

    DatabaseHelper dh;

    Movimento movimento = new Movimento();
    DAOMovimento daoMovimento;
    DAOItem daoItem;

    DAOTipoMv daoTipoMv;
    DAOCondPagto daoCondPagto;
    DAOFormaPag daoFormaPag;
    DAOPessoa daoPessoa;
    DAOVendedor daoVendedor;

    List<Item> items = new ArrayList<>();

    ListView listViewProdutos;

    String idvendedor ;

    int V =0;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_novo__pedido);

        dh = new DatabaseHelper(this);
        try {
            daoMovimento = new DAOMovimento(dh.getConnectionSource());
            daoItem = new DAOItem(dh.getConnectionSource());
            daoTipoMv = new DAOTipoMv(dh.getConnectionSource());
            daoCondPagto = new DAOCondPagto(dh.getConnectionSource());
            daoFormaPag = new DAOFormaPag(dh.getConnectionSource());
            daoPessoa = new DAOPessoa(dh.getConnectionSource());
            daoVendedor = new DAOVendedor(dh.getConnectionSource());
        }catch (SQLException e){
            e.printStackTrace();
        }

        tipoMv = findViewById(R.id.ptitpomv);
        tipoMv.setFocusable(false);
        condPagto = findViewById(R.id.pprazo);
        condPagto.setFocusable(false);
        formaPag = findViewById(R.id.pformapagto);
        formaPag.setFocusable(false);
        cliente = findViewById(R.id.pcliente);
        cliente.setFocusable(false);
        observacao = findViewById(R.id.pedobservacao);
        /*totalvenda = findViewById(R.id.totalvenda);
        */
        listViewProdutos = (ListView) findViewById(R.id.listviewProdutos);

        Bundle bundle = getIntent().getExtras();
        idvendedor = bundle.getString("idvendedor");

    }

    public void tipopedido(View view){
        Intent intent = new Intent(this,Novo_Pedido_TipodePedido.class);
        startActivity(intent);
        V = 1;
    }

    public void condpagto(View view){
        Intent intent = new Intent(this,Novo_Pedido_CondPagto.class);
        startActivity(intent);
        V = 2;
    }

    public void formaPag(View view){
        Intent intent = new Intent(this,Novo_Pedido_FormaPag.class);
        startActivity(intent);
        V = 3;
    }
    //pclientes
    public void pclientes(View view){
        Intent intent = new Intent(this,Novo_Pedido_Cliente.class);
        startActivity(intent);
        V = 4;
    }

    public void adicionarProduto(View view) throws SQLException {
       if(movimento.getTipoMv() != null && movimento.getCliente() != null && movimento.getFormaPag() != null && movimento.getCondPagto() != null) {
           gravaMovimento();
           Intent intent = new Intent(this, Novo_Pedido_Adicionar_Produto.class);
           intent.putExtra("idmovimento",movimento.getIdmov());
           startActivity(intent);
           V = 5;
       }else{
           Toast.makeText(this, "Informe todos os dados !", Toast.LENGTH_SHORT).show();
       }
    }

    private void gravaMovimento() {
        //movimento.setObservacao();
        try {
            Date d = new Date();
            movimento.setDtvenda(d);
            movimento.setObservacao(observacao.getText().toString());
            movimento.setVendedor(daoVendedor.queryForId(Integer.parseInt(idvendedor.toString())));
            daoMovimento.createOrUpdate(movimento);
            Toast.makeText(this, "Cadastrado com sucesso !", Toast.LENGTH_SHORT).show();
        }catch (SQLException e){
            e.printStackTrace();
        }

    }

    @Override
    protected void onStart() {
        super.onStart();
        buscatipopedido();
        buscaCondpagto();
        buscaFormaPag();
        buscaCliente();
        additemLista();
    }

    private void additemLista() {
        if(V==5) {
            try {
                items = new ArrayList<>();
                items.addAll(daoItem.queryBuilder().where().eq("idmv",movimento.getIdmov()).query());
                if (items.size() >0){
                    /*nao permite alterar o tipo de pedido, pois pode variar o valor do item*/
                    tipoMv.setEnabled(false);
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            ADP_Items adp_items = new ADP_Items(this,items);
            listViewProdutos.setAdapter(adp_items);
            setListViewHeightBasedOnItems(listViewProdutos);
        }

    }

    private void buscatipopedido() {
        SharedPreferences lt = PreferenceManager.getDefaultSharedPreferences(getApplicationContext()); //this.getPreferences(Context.MODE_PRIVATE);
        SharedPreferences.Editor editor = lt.edit();
        String t = lt.getString("idtipopedido","vazio");

        if(V==1) {
            if (!t.equals("vazio")) {
                try {
                    movimento.setTipoMv(daoTipoMv.queryForId(Integer.parseInt(t)));
                    tipoMv.setText(movimento.getTipoMv().getNome().toString());
                    V=0;
               } catch (SQLException e) {
                   e.printStackTrace();
                }
            } else {
                Toast.makeText(this, "Tipo de Pedido Informada inválida", Toast.LENGTH_SHORT).show();
            }
        }
    }

    private void buscaCondpagto() {
        SharedPreferences lt = PreferenceManager.getDefaultSharedPreferences(getApplicationContext()); //this.getPreferences(Context.MODE_PRIVATE);
        SharedPreferences.Editor editor = lt.edit();
        String t = lt.getString("idcondpagto","vazio");

        if(V==2) {
            if (!t.equals("vazio")) {
                try {
                    movimento.setCondPagto(daoCondPagto.queryForId(Integer.parseInt(t)));
                    condPagto.setText(movimento.getCondPagto().getNome().toString());
                    V=0;
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            } else {
                Toast.makeText(this, "Prazo de Pagamento Informado inválido", Toast.LENGTH_SHORT).show();
            }
        }
    }

    private void buscaFormaPag() {
        SharedPreferences lt = PreferenceManager.getDefaultSharedPreferences(getApplicationContext()); //this.getPreferences(Context.MODE_PRIVATE);
        SharedPreferences.Editor editor = lt.edit();
        String t = lt.getString("idformapag","vazio");

        if(V==3) {
            if (!t.equals("vazio")) {
                try {
                    movimento.setFormaPag(daoFormaPag.queryForId(Integer.parseInt(t)));
                    formaPag.setText(movimento.getFormaPag().getNome().toString());
                    V=0;
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            } else {
                Toast.makeText(this, "Forma de Cobrança Informada inválida", Toast.LENGTH_SHORT).show();
            }
        }
    }

    private void buscaCliente() {
        SharedPreferences lt = PreferenceManager.getDefaultSharedPreferences(getApplicationContext()); //this.getPreferences(Context.MODE_PRIVATE);
        SharedPreferences.Editor editor = lt.edit();
        String t = lt.getString("idcliente","vazio");

        if(V==4) {
            if (!t.equals("vazio")) {
                try {
                    movimento.setCliente(daoPessoa.queryForId(Integer.parseInt(t)));
                    cliente.setText(movimento.getCliente().getNome().toString());
                    V=0;
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            } else {
                Toast.makeText(this, "Cliente Informado inválido", Toast.LENGTH_SHORT).show();
            }
        }
    }

    public static boolean setListViewHeightBasedOnItems(ListView listView) {

        ListAdapter listAdapter = listView.getAdapter();
        if (listAdapter != null) {

            int numberOfItems = listAdapter.getCount();

            // Get total height of all items.
            int totalItemsHeight = 0;
            for (int itemPos = 0; itemPos < numberOfItems; itemPos++) {

                float px = 300 * (listView.getResources().getDisplayMetrics().density);

                View item = listAdapter.getView(itemPos, null, listView);
                item.measure(View.MeasureSpec.makeMeasureSpec((int)px, View.MeasureSpec.AT_MOST), View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED));
                totalItemsHeight += item.getMeasuredHeight();
            }

            // Get total height of all item dividers.
            int totalDividersHeight = listView.getDividerHeight() * (numberOfItems - 1);
            // Get padding
            int totalPadding = listView.getPaddingTop() + listView.getPaddingBottom();

            // Set list height.
            ViewGroup.LayoutParams params = listView.getLayoutParams();
            params.height = totalItemsHeight + totalDividersHeight + totalPadding;
            listView.setLayoutParams(params);
            listView.requestLayout();

            return true;

        } else {
            return false;
        }

    }
}
