package net.ddns.scvemarchezanmetais.scvemobile.dadosws;

import android.app.Activity;
import android.os.AsyncTask;
import android.os.Build;
import android.support.annotation.RequiresApi;
import android.util.Log;
import android.widget.Toast;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.reflect.TypeToken;

import net.ddns.scvemarchezanmetais.scvemobile.banco.DatabaseHelper;
import net.ddns.scvemarchezanmetais.scvemobile.dao.DAOItem;
import net.ddns.scvemarchezanmetais.scvemobile.dao.DAOMovimento;
import net.ddns.scvemarchezanmetais.scvemobile.entidades.Item;
import net.ddns.scvemarchezanmetais.scvemobile.entidades.Movimento;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

public class WsPedidosPOST extends AsyncTask<String,Integer,String> {
    Activity activity;


    private DatabaseHelper dh;
    private DAOMovimento daoMovimento;
    private DAOItem daoItem;
    private List<Movimento> movimentos = new ArrayList<>();

    private List<Item> items = new ArrayList<>();

    public WsPedidosPOST(Activity activity, List<Movimento> movimentos){
        this.activity = activity;
        this.movimentos = movimentos;
    }

    @Override
    protected void onPreExecute() {
        super.onPreExecute();
        Toast.makeText(activity, "Enviando Pedido", Toast.LENGTH_SHORT).show();
    }

    @RequiresApi(api = Build.VERSION_CODES.KITKAT)
    @Override
    protected void onPostExecute(String s) {
        super.onPostExecute(s);
       // Toast.makeText(activity, "" + s, Toast.LENGTH_SHORT).show();
        Log.i("Envia Pedido","Resposta do Servidor:"+s);
        if(s != "erro" && s != null && s != "") {
            dh = new DatabaseHelper(activity);
            try {
                daoMovimento = new DAOMovimento(dh.getConnectionSource());
                daoItem = new DAOItem(dh.getConnectionSource());

                Gson gson = new GsonBuilder().setDateFormat("dd/MM/yyyy").create();
                Collection<Movimento> retorno = new ArrayList<>();
                try {
                    retorno = gson.fromJson(s, new TypeToken<Collection<Movimento>>(){}.getType());
                }catch (Exception e){
                    e.printStackTrace();
                }

            //Toast.makeText(activity, "" + s, Toast.LENGTH_SHORT).show();
            for (Movimento p : movimentos) {
                for(Movimento p1 : retorno){
                   if (p1.getCliente().getIdpessoa().equals(p.getCliente().getIdpessoa()) && p1.getTipomv().getIdmv().equals(p.getTipomv().getIdmv())
                           && p1.getCondpagto().getIdcondpgto().equals(p.getCondpagto().getIdcondpgto()) && p1.getFormapag().getIdformapag().equals(p.getFormapag().getIdformapag())
                           && p1.getDtvenda().equals(p.getDtvenda()) && p1.getTotalvenda().equals(p.getTotalvenda())  ){
                    //if(p1.getCliente().getNome().equals(p.getCliente().getNome())){
                        try {
                            /*update*/
                            int cod = p.getIdmov();
                            p.setCanal("INTERNO");
                            daoMovimento.update(p);
                            daoMovimento.updateId(p, p1.getIdmov());

                            items = new ArrayList<>();
                            items.addAll(daoItem.queryBuilder().where().eq("idmv",cod).query());
                            for(Item c : items){
                                c.setMovimento(p);
                                daoItem.update(c);
                            }
                            Toast.makeText(activity, "Pedido Enviado com Sucesso", Toast.LENGTH_SHORT).show();

                        } catch (SQLException e) {
                            e.printStackTrace();
                        }
                    }
                }
            }

            } catch (SQLException e) {
                e.printStackTrace();
            }
            dh.close();
        }else{
            Toast.makeText(activity, "Falha ao enviar Pedido a Empresa", Toast.LENGTH_SHORT).show();
            Log.i("Envia Pedido","Falha ao enviar Pedido a Empresa");
        }

        if(s == null || s == ""){
            Toast.makeText(activity, "Erro de Conexão Com servidor", Toast.LENGTH_SHORT).show();
            Log.i("Envia Pedido","Erro de Conexão Com servidor");
        }

    }
    @Override
    protected void onProgressUpdate(Integer... values) {
        super.onProgressUpdate(values);

    }

    @RequiresApi(api = Build.VERSION_CODES.KITKAT)
    @Override
    protected String doInBackground(String... strings) {

        String response = null;
        String url = null;
        url = (strings[0]);
        //Gson gson = new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create();
        Gson gson = new GsonBuilder().excludeFieldsWithoutExposeAnnotation().setDateFormat("yyyy-MM-dd").create();
        String pedidos = gson.toJson(movimentos);

        try {
            // Cria um objeto HttpURLConnection:
            HttpURLConnection request = (HttpURLConnection) new URL(url).openConnection();

            try {
                // Define que a conexão pode enviar informações e obtê-las de volta:
                request.setDoOutput(true);
                request.setDoInput(true);

                // Define o content-type:
                request.setRequestProperty("Content-Type", "application/json");

                // Define o método da requisição:
                request.setRequestMethod("POST");

                //define 10 segundos de tempo para conseguir se conectar
                request.setConnectTimeout(10000);
                // Conecta na URL:
                request.connect();

                //Log.i("Codigo de Resposta",""+res);
                    // Escreve o objto JSON usando o OutputStream da requisição:
                    try (OutputStream outputStream = request.getOutputStream()) {
                        outputStream.write(pedidos.getBytes("UTF-8"));
                    }
                // Caso você queira usar o código HTTP para fazer alguma coisa, descomente esta linha.
                //response = String.valueOf(request.getResponseCode());

                return readResponse(request);
            } finally {
                request.disconnect();
            }
        } catch (IOException ex) {
            try {
                throw new MinhaException(ex);
            } catch (MinhaException e) {
                e.printStackTrace();
            }
        }
        return null;
    }


    @RequiresApi(api = Build.VERSION_CODES.KITKAT)
    private String readResponse(HttpURLConnection request) throws IOException {
        ByteArrayOutputStream os;
        try (InputStream is = request.getInputStream()) {
            os = new ByteArrayOutputStream();
            int b;
            while ((b = is.read()) != -1) {
                os.write(b);
            }
        }
        return new String(os.toByteArray());
    }


    public static class MinhaException extends Exception {
        private static final long serialVersionUID = 1L;

        public MinhaException(Throwable cause) {
            super(cause);
        }
    }
}


