package net.ddns.scvemarchezanmetais.scvemobile.activitys;

import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Build;
import android.os.Bundle;
import android.preference.PreferenceManager;
import android.support.annotation.RequiresApi;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.Toast;

import net.ddns.scvemarchezanmetais.scvemobile.R;
import net.ddns.scvemarchezanmetais.scvemobile.adapters.ADP_Pedidos;
import net.ddns.scvemarchezanmetais.scvemobile.banco.DatabaseHelper;
import net.ddns.scvemarchezanmetais.scvemobile.dadosws.WsPedidosPOST;
import net.ddns.scvemarchezanmetais.scvemobile.dadosws.WsVerificaConexao;
import net.ddns.scvemarchezanmetais.scvemobile.dao.DAOItem;
import net.ddns.scvemarchezanmetais.scvemobile.dao.DAOMovimento;
import net.ddns.scvemarchezanmetais.scvemobile.entidades.Item;
import net.ddns.scvemarchezanmetais.scvemobile.entidades.Movimento;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class Pedidos extends AppCompatActivity implements AdapterView.OnItemClickListener,AdapterView.OnItemLongClickListener{
    private ListView listView;
    private DatabaseHelper dh;
    private DAOMovimento daoMovimento;
    private DAOItem daoItem;
    private Movimento movimento = new Movimento();
    private ADP_Pedidos adp_pedidos;

    List<Item> items = new ArrayList<>();
    List<Movimento> movimentos = new ArrayList<>();
    List<Movimento> movimentosFiltrados = new ArrayList<>();
    EditText filtro ;
    String idvendedor;

    private AlertDialog alerta;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_pedidos);

        Bundle bundle = getIntent().getExtras();
        idvendedor = bundle.getString("idvendedor");

        filtro =  findViewById(R.id.filtro_pedidos);
        listView = (ListView) findViewById(R.id.listviewPedidos);
        listView.setOnItemClickListener(this);
        listView.setOnItemLongClickListener(this);
    }

    @Override
    protected void onStart() {
        super.onStart();
        filtro.setText("");
        preencherLista();
    }

    public void preencherLista(){
        dh = new DatabaseHelper(Pedidos.this);
        try {
            daoItem = new DAOItem(dh.getConnectionSource());
            daoMovimento = new DAOMovimento(dh.getConnectionSource());
        }catch (SQLException e){
            e.printStackTrace();
        }

        try {
            movimentos = daoMovimento.queryForAll();
        } catch (SQLException e) {
            e.printStackTrace();
        }

        adp_pedidos = new ADP_Pedidos(Pedidos.this,movimentos);
        listView.setAdapter(adp_pedidos);

        listView.setTextFilterEnabled(true);
        filtro.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                //quando o texto é alterado chamamos o filtro.
                Pesquisar();
                adp_pedidos = new ADP_Pedidos(Pedidos.this,movimentosFiltrados);
                listView.setAdapter(adp_pedidos);
            }

            @Override
            public void afterTextChanged(Editable s) {

            }
        });
    }

    @Override
    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
        Movimento movimento2 = (Movimento) parent.getItemAtPosition(position);
        Intent intent = new Intent(this, Formulario_Pedido.class);
        intent.putExtra("idmv",movimento2.getIdmov());
        intent.putExtra("idvendedor",idvendedor);
        startActivity(intent);
    }
    @Override
    public boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id) {
        final Movimento movimento1 = (Movimento) parent.getItemAtPosition(position);
        ArrayList<String> itens = new ArrayList<>();

        if(movimento1.getCanal().equals("EXTERNO")) {
            itens.add("Editar");
            itens.add("Excluir");
            itens.add("Enviar para Empresa");
        }
        //adapter utilizando um layout customizado (TextView)
        ArrayAdapter adapter = new ArrayAdapter(this, R.layout.item_alerta, itens);

        final AlertDialog.Builder builder = new AlertDialog.Builder(this);

        builder.setTitle("O que deseja fazer ?");
        builder.setSingleChoiceItems(adapter, 0, new DialogInterface.OnClickListener() {
            @RequiresApi(api = Build.VERSION_CODES.KITKAT)
            public void onClick(DialogInterface arg0, int arg1) {
                //Toast.makeText(Clientes.this, "posição selecionada=" + arg1, Toast.LENGTH_SHORT).show();
                if(arg1 == 0){//Editar
                    Intent intent = new Intent(Pedidos.this, Novo_Pedido.class);
                    intent.putExtra("idmv",movimento1.getIdmov());
                    intent.putExtra("idvendedor",idvendedor);
                    startActivity(intent);
                    alerta.dismiss();
                }else if(arg1 ==1){//Excluir
                    try {
                        items = new ArrayList<>();
                        items.addAll(daoItem.queryBuilder().where().eq("idmv",movimento1.getIdmov()).query());
                        for (Item item :items){
                            daoItem.delete(item);
                        }
                        daoMovimento.delete(movimento1);
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                    preencherLista();
                    alerta.dismiss();
                }else if(arg1 ==2) {//Enviar para empresa
                    //if verifica conexao da internet
                    if(WsVerificaConexao.isOnline(Pedidos.this)) {
                        //Toast.makeText(Clientes.this, "teste de envio para empresa", Toast.LENGTH_SHORT).show();

                        List<Movimento> movimentos2 = new ArrayList<>();
                        movimentos2.add(movimento1);

                        SharedPreferences lt = PreferenceManager.getDefaultSharedPreferences(getApplicationContext()); //this.getPreferences(Context.MODE_PRIVATE);
                        SharedPreferences.Editor editor = lt.edit();
                        String configJ = lt.getString("config","vazio");

                        //busca dados dos tipo de enderecos
                        WsPedidosPOST wsPedidosPOST = new WsPedidosPOST(Pedidos.this, movimentos2);
                        wsPedidosPOST.execute(configJ+"/scve/reset/pedidos/gravar", "", "");
                        preencherLista();
                    }else{
                        Toast.makeText(Pedidos.this, "Sem Conexão com a Internet !", Toast.LENGTH_SHORT).show();
                    }
                    alerta.dismiss();
                }
            }
        });
        alerta = builder.create();
        //Exibe
        alerta.show();
        return true;
    }

    public void Pesquisar() {
        //int textlength = filtro.getText().length();
        movimentosFiltrados.clear();

        for (int i = 0; i < movimentos.size(); i++) {
            Movimento data = movimentos.get(i);

            if (!filtro.getText().equals("")) {
                String filtro2 = filtro.getText().toString().toLowerCase();
                String condicao = data.getCliente().getNome().toLowerCase();

                if (condicao.contains(filtro2)) {
                    //se conter adiciona na lista de itens filtrados.
                    movimentosFiltrados.add(data);
                }
            }else{
                movimentosFiltrados.addAll(movimentos);
            }
        }
    }
}
